#!/usr/bin/env python3

from typing import Union
import argparse, sys, os, pathlib, re

def main(argv: list) -> None:
    """The main part of the program. Works as an overview of the code."""
    parser = create_argparser()
    options = parser.parse_args(argv[1:])
    title = (options.title[0] if options.title else "Document")
    style_path = (options.style_path[0] if options.style_path else None)

    # Check where is the input.
    istream = None
    if options.body_file:
        # Input file (from argv)
        with open(options.body_file, "r") as f:
            istream = f.read()
    else:
        # Stdin data (when piping)
        istream = "".join(sys.stdin.readlines())

    stdout = wrap(istream, title, style_path)
    print(stdout)

def create_argparser() -> argparse.ArgumentParser:
    """Sets up a new argument parser and returns it."""
    parser = argparse.ArgumentParser(
        prog = "html-wrapper",
        description = "a simple tool to wrap html content to make it better readable.",
    )

    parser.add_argument(
        "body_file",
        help="the file that contains the body; if not specified, the program reads from STDIN",
        action="store",
        type=str,
        nargs="?",
    )

    parser.add_argument(
        "-t", "--title",
        help="the title of the document",
        action="store",
        type=str,
        nargs=1,
    )

    parser.add_argument(
        "-s", "--style-path",
        help="the path of the CSS file",
        action="store",
        type=str,
        nargs=1,
    )

    parser.add_argument(
        "-v", "--version",
        action="version",
        version=f"{parser.prog} 1.0",
    )

    return parser

def wrap(body: str, title: str, style_path: Union[None, str]) -> str:
    """Wraps a html body and returns it."""
    tag_wrap = lambda tag, content: "<{0}>{1}</{0}>".format(tag, content)
    final: str = tag_wrap("html", get_head(title, style_path) + tag_wrap("body", body) + get_footer())
    return final

def get_head(title: str, style_path: Union[None, str]) -> str:
    """Gets the head with the title `title`. """
    css = None
    if style_path != None:
        contents = open(style_path, "r")
        css = contents.read()
    else:
        css_path = None
        try:
            css_path = os.environ["MD_DEFAULT_CSS"]
        except KeyError:
            css_path = str(pathlib.Path("~/.local/share/css/default.css").expanduser())

        if pathlib.Path(css_path).is_file():
            with open(css_path, "r") as f:
                css = f.read()
        else:
            css = DEFAULT_CSS

        css = re.sub(r"\n", "", css)
    return """<head>
              <title>{}</title>
              <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
              <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
              <meta name="HandheldFriendly" content="true">
              <meta charset="UTF-8">
              {}
              </head>""".format(
                  title,
                  "<style>{}</style>".format(css),
              )

def get_footer() -> str:
    """Gets the footer of the file. Nothing, for now."""
    return ""

DEFAULT_CSS = """
body {
    font-family: "Arial, monospace";
}
"""

if (__name__ == "__main__"):
    import sys
    main(sys.argv)
