#!/usr/bin/env bash

# Get the title of a webpage and add said title + the webpage link to
# the bookmarks.

# Reference:
# https://unix.stackexchange.com/questions/103252/how-do-i-get-a-websites-title-using-command-line

source ~/.local/lib/ystd.sh
depCheck recode wget perl

if [ $# != 1 ]; then
  cat >&2 <<EOF
Usage: $(basename $0) <url>
Bookmark file is \${BKMK_FILE:-~/.cache/bkmk}
EOF
  exit 1
fi

url="$1"
template="$(printf '%s %s "%s" "%s" %s' "%s" "f" "%s" "$url" "bkadd")"
file="${BKMK_FILE:-~/.cache/bkmk}"

title="$(wget -qO- "$1" \
  | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si' \
  | recode html..)"
if [ -z "$title" ]; then
  printf "Page not found (or empty title).\n" >&2
  exit 2
else
  printf "Title: %s\n" "$title"
fi

if [ -f "$file" ]; then
  # Search for the last line that contains useful bookmark data to get
  # its ID.
  tailCounter=1
  while line="$(tail -"$tailCounter" "$file" | head -1)"; do
    grep -vq '^#' <<<"$line" \
      && grep -vq '^$' <<<"$line" \
      && bookmarkID="$(printf "%s" "$line" | awk '{print $1}')" \
      && if ! [ "$bookmarkID" -eq "$bookmarkID" ] 2>/dev/null; then
          printf "Parsing error on bookmarks file: not a valid bookmark ID: %s\n" "$bookmarkID" >&2
          exit 3
        else
          break
      fi

    tailCounter="$(($tailCounter + 1))"

    # Set bookmarkID to 0 if no file was found.
    [ "$tailCounter" -gt "$(wc -l < "$file")" ] \
      && bookmarkID=-1 \
      && break
  done
else
  # Bookmarks file doesn't exist, so bookmark ID is 0
  bookmarkID=-1
fi

bookmarkID="$(printf "%02d\n" "$(($bookmarkID + 1))")"
printf "$template\n" "$bookmarkID" "$title" >> "$file"
