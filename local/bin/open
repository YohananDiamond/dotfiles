#!/usr/bin/env sh

# An opener script based off nuke.
# https://github.com/jarun/nnn/blob/master/plugins/nuke

# Environment Variables
# OPEN_GUI: whether the file should be always opened on a GUI
# application.

# Options
set -f -o noclobber -o noglob

# Assist Functions
#   exists: if a command exists
#   try_run: checks if a command exists. If it exists, run it and exit the
# script.
#   try_run_t: only runs if OPEN_GUI is unset
#   try_run_g: only runs if OPEN_GUI is set
#   try_run_p: acts like try_run_t, but pipes the output of the command
# to a pager.
exists() { type "$1" >/dev/null 2>/dev/null; }
try_run() {
  exists "$1" || return
  if [ -n "$OPEN_GUI" ]; then
    "$@" >/dev/null 2>/dev/null
  else
    "$@"
  fi
  exit 0
}
try_run_t() { [ -z "$OPEN_GUI" ] || return; try_run "$@"; }
try_run_g() { [ -n "$OPEN_GUI" ] || return; try_run "$@"; }
try_run_p() {
  exists "$1" && [ -z "$OPEN_GUI" ] || return
  "$@" | less -R
  exit 0
}

IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}" # protect trailing \n
PATH=$PATH:"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins"

FILE="$1"
FILENAME=$(basename "$1")
EXT="${FILENAME##*.}"
if ! [ -z "$EXT" ]; then
  EXT="$(printf "%s" "$EXT" | tr '[:upper:]' '[:lower:]')"
fi

handle_pdf() {
  try_run_g zathura "$FILE"
  try_run_p pdftotext -l 10 -nopgbrk -q -- "$FILE" -
  try_run_t mutool draw -F txt -i -- "$FILE" 1-10
  try_run_p exiftool "$FILE"
}

handle_audio() {
  exists mocp && try_run mocplay "$FILE" "opener"
  try_run mpv "$FILE"
  try_run mediainfo "$FILE"
  try_run exiftool "$FILE"
}

handle_video() {
  try_run_g smplayer "$FILE"
  try_run_g mpv "$FILE"
  try_run_p mediainfo "$FILE"
  try_run_p mediainfo "$FILE"
}

handle_ext() {
  case "$EXT" in
    a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
      try_run_p atool --list -- "$FILE"
      try_run_p bsdtar --list --file "$FILE"
      ;;
    rar) try_run_p unrar lt -p- -- "$FILE" ;;
    7z) try_run_p 7z l -p -- "$FILE" ;;
    pdf) handle_pdf ;;

    aac|flac|m4a|mid|midi|mpa|mp2|mp3|ogg|wav|wma)
      handle_audio ;;

    avi|mkv|mp4)
      handle_video ;;

    log) try_run_p cat "$FILE" ;;

    torrent)
      try_run_t rtorrent "$FILE"
      try_run_t transmission-show -- "$FILE"
      ;;

    odt|ods|odp|sxw)
      try_run_p odt2txt "$FILE" ;;

    md) try_run_p glow -sdark "$FILE" ;;

    htm|html|xhtml)
      try_run_p w3m -dump "$FILE"
      try_run_p lynx -dump -- "$FILE"
      try_run_p elinks -dump "$FILE"
      ;;

    json)
      try_run_p jq --color-output . "$FILE"
      try_run_p python -m json.tool -- "$FILE"
      ;;
  esac
}

handle_multimedia() {
  case "$1" in
    image/*)
      try_run_g sxiv "$FILE"
      try_run_p viu -n "$FILE"
      try_run_p img2txt --gamma=0.6 -- "$FILE"
      try_run_p exiftool "$FILE"
      ;;

    application/pdf) handle_pdf ;;
    audio/*) handle_audio ;;
    video/*) handle_video ;;
  esac
}

handle_mime() {
  case "$1" in
    text/troff) try_run_p man -l "$FILE" ;;
    text/*) try_run_p cat "$FILE" ;;
    */xml) try_run_p cat "$FILE" ;;
    image/vnd.djvu)
      try_run_p djvutxt "$FILE"
      try_run_p exiftool "$FILE"
      ;;
  esac
}

handle_fallback() {
  try_run_g xdg-open "$FILE"
  try_run_p printf "*** File Details ***\n%s" "$(file --dereference --brief $FILE)"
}

handle_blocked() {
  case "$1" in
    application/x-sharedlib) exit 1 ;;
    application/x-shared-library-la) exit 1 ;;
    application/x-executable) exit 1 ;;
    application/x-shellscript) exit 1 ;;
  esac
}

MIMETYPE="$(file --dereference --brief --mime-type -- $FILE)"
handle_blocked "$MIMETYPE"
handle_ext
handle_multimedia "$MIMETYPE"
handle_mime "$MIMETYPE"
handle_fallback
exit 1
