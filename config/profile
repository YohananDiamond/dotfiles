#!/usr/bin/env bash

# Shell Profile
# This is run at login on a TTY.

exists() { command -v "$1" >/dev/null 2>/dev/null; }
loggedSource() {
  [ $# = 1 ] || return 1
  printf >&2 "Sourcing %s...\n" "$1"
  . "$1"
}

# load environment variables, set up $PATH and load libraries
loggedSource ~/.config/dots/env.sh
loggedSource ~/.config/dots/path.sh

os=$(uname -o)
printf >&2 "Uname: %s\n" "$os"

startjob() {
  local line

  printf >&2 'Starting job -> "%s"\n' "$1"

  "$2" 2>&1 | while read line; do
    printf >&2 "\033[2K\r@job[%s] :: %s\n" "$1" "$line"
  done &
}

_updateClock() {
  local output=$(sudo -n ntpd -gq 2>&1)

  if [ $# = 0 ]; then
    printf >&2 "Update finished!\n"
  else
    printf >&2 "Update failed - printing output..."
    printf >&2 "%s\n" "$output"
  fi
}

if [ "$os" != Android ]; then
  if [ "$DOTFILES" ]; then
    tty-loadcolors
  fi

  # update the date because clock problems
  exists ntpd && startjob "Clock Update" _updateClock

  if [ "$DOTFILES" ]; then
    printf >&2 "Preparing SSH agent..."
    gpgconf --launch gpg-agent
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
    printf >&2 "OK!\n"

    printf >&2 "Generating config (sysm)...\n"
    sysm

    # set up SSH keychaing
    # if [ -x /usr/bin/keychain ]; then
    #   eval "$(keychain --eval --ignore-missing ~/.ssh/id_rsa 2>/dev/null)"
    # fi
  fi
fi

# Set up dotcfg-daemon
{
  while true; do
    _fifo=$(mktemp -u)
    mkfifo "$_fifo" && break
  done

  DOTCFG_FIFO="$_fifo" dotcfg-daemon >/dev/null 2>/dev/null & disown
  export DOTCFG_PORT=$(cat "$_fifo")

  gen-res dotcfg | dotcfg-client read-and-set
}
