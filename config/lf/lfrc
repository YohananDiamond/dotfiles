# -*- mode: sh; -*-
# vim: ft=conf fdm=marker foldmarker={{,}}

set shell bash
set previewer preview
set preview
# set hidden
# set drawbox
set icons
set ignorecase

# commands
cmd new ${{
  clear; set -f

  while true; do
    printf "(f)ile or (d)ir => "
    read -n1 answer
    printf "\n"

    case "$answer" in
      f|d) break ;;
      ) exit ;;
      *) ;;
    esac
  done

  printf "filename => "
  read filename
  printf "\n"

  [ -z "$filename" ] && exit

  if [ -e "$filename" ]; then
    printf "Filename already exists.\n"
    read _
  else
    case "$answer" in
      f) touch "$filename" ;;
      d) mkdir "$filename" ;;
    esac

    if [ $? != 0 ]; then
      printf "Failed to create file.\n"
      read _
    fi
  fi
}}
cmd trash ${{
  clear; set -f

  IFS=$(printf '\n\t')
  printf "Selected files:\n"
  printf "  %s\n" $fx
  printf "Would you like to send them to the TRASH?\n"

  while true; do
    printf "(y)es or (n)o => "
    read -n1 answer
    printf "\n"

    case "$answer" in
      y) trash-put $fx; break ;;
      n) break ;;
      *) ;;
    esac

    if [ $? != 0 ]; then
      printf "Failed to move file(s) to trash.\n"
      read _
    fi
  done
}}
cmd delete ${{
  clear; set -f

  IFS=$(printf '\n\t')
  printf "Selected files:\n"
  printf "  %s\n" $fx
  printf "Would you like to PERMANENTLY DELETE them?\n"

  while true; do
    printf "(y)es or (n)o => "
    read -n1 answer
    printf "\n"

    case "$answer" in
      y) rm -rvf $fx; break ;;
      n) break ;;
      *) ;;
    esac

    if [ $? != 0 ]; then
      printf "Failed to permanently delete file(s).\n"
      read _
    fi
  done
}}
cmd move-here ${{
  clear; set -f
  IFS=$(printf '\n\t')
  for file in $fs; do
    mv -vt . -- "$file"

    if [ $? != 0 ]; then
      printf "Failed to move file '%s'.\n" "$file"
      read _
      break
    fi
  done
}}
cmd copy-here ${{
  clear; set -f
  IFS=$(printf '\n\t')
  for file in $fs; do
    cp -vrt . -- "$file"

    if [ $? != 0 ]; then
      printf "Failed to copy file '%s'.\n" "$file"
      read _
      break
    fi
  done
}}
cmd extract-this ${{
  clear; set -f
  [ "$f" ] && ext "$f"

  if [ $? != 0 ]; then
    printf "Failed to extract file.\n"
    read _
    break
  fi
}}

# command mappings
map . set hidden!
map n new
map <c-n> search-next
map x trash
map X delete
map v :move-here; unselect
map p :copy-here; unselect
map R ${{ vidir }}
map E extract-this

# bookmark mappings
map gh cd ~
