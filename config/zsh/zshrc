# -*- origami-fold-style: triple-braces -*-
# vim: fdm=marker

# Init {{{

# Load the library file
source ~/.local/lib/ystd.sh &>/dev/null \
  || printf "Couldn't load library file.\n"

# Load some other libraries
sourceIf ~/.config/dots/env.sh
sourceIf "$STORAGE/share/zshrc.personal"
sourceIf "$HOME/.config/broot/launcher/bash/br"

# }}}
# Plugins and Extensions {{{

autoload -U colors && colors

# Completion
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # Include hidden files in autocomplete

# }}}
# Prompt {{{

precmd() {
  # Use beam shape cursor for each new prompt.
  printf '\033[5 q'

  # Update title
  local cwd="$(pwd)"
  if grep -q '^'"$HOME" <<<"$cwd"; then
    local cwd="$(sed 's/^'"$(sed 's/\//\\\//g' <<<"$HOME")"'/~/g' <<<"$cwd")"
  fi
  setTitle "$(whoami)@$(hostname):$cwd"
}

[ "$(uname -o)" = "Android" ] && SHORT_PROMPT=1

if [ -n "$SHORT_PROMPT" ]; then
  PS1="%B%{$fg[green]%}[:%{$fg[magenta]%}%~%{$fg[green]%}]%{$reset_color%}%b\$ "
else
  PS1="%B%{$fg[green]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M:%{$fg[magenta]%}%~%{$fg[green]%}]%{$reset_color%}%b\$ "
fi

PS2='  '
RPROMPT="%(?..%?)"

# }}}
# Keybindings Config {{{

# Use vim keys in tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes
function zle-keymap-select { # {{{
  if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]]; then
    printf '\033[1 q'
  elif [[ ${KEYMAP} == main ]] || [[ ${KEYMAP} == viins ]] \
    || [[ ${KEYMAP} = '' ]] || [[ $1 = 'beam' ]]; then
    printf '\033[5 q'
  fi
} # }}}
function zle-line-init { # {{{
  zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
  printf '\e[5 q'
} # }}}

zle -N zle-keymap-select
zle -N zle-line-init

# Use fzf to search history
fh() { # {{{
  print -z $( ([ -n "${ZSH_NAME}" ] && fc -l 1 || history) | fzf --no-sort --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
} # }}}

# Actual binding
bindkey -s '^R' '\e0Cfh\n'

# }}}
# Commands {{{

assist::find-file.gen() { # {{{
  printf "%s\n" ".."
  if [ "$1" = 1 ]; then
    fd -H
  else
    fd
  fi
} # }}}
assist::where-to-go.gen() { # {{{
  [ -r "$DIR_BOOKMARKS" ] \
    && cat "$DIR_BOOKMARKS" | while read bookmark; do
      eval 'printf "@bkmk %s\n" '"$bookmark" # yes, it's eval-unsafe.
    done

  printf "@bkmk %s\n" "$HOME"
  [ -d "$PROJECTS" ] && \
    (cd "$PROJECTS" && fd -d1 -td '.' | sed 's/^/@proj /g')
} # }}}

where-to-go() { # {{{
  local choice tag body

  choice="$(assist::where-to-go.gen | fzagnostic)" || return 1
  tag=$(sed 's/^@\([aA-zZ0-9\-]\+\) .*$/\1/g' <<<"$choice")
  body=$(sed 's/^@[aA-zZ0-9\-]\+ \(.*\)$/\1/g' <<<"$choice")

  case "$tag" in
    proj) cd "$PROJECTS/$body" ;;
    bkmk) cd "$body" ;;
  esac
} # }}}
nnn-explore() { # {{{
  # block nesting of nnn in subshells
  if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
    printf "%s\n" "nnn is already running"
    return 1
  fi

  export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  nnn "$@"
  if [ -f "$NNN_TMPFILE" ]; then
    . "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" >/dev/null
  fi
} # }}}
find-file() { # {{{
  local prog choice choices hidden
  hidden=0

  if [ "$1" = "-H" ]; then
    hidden=1
    shift
  fi

  prog="${1:-$EDITOR}"
  choice="$(assist::find-file.gen "$hidden" | fzagnostic)" || return 1

  if [ -f "$choice" ]; then
    "$prog" "$choice"
  elif [ -d "$choice" ]; then
    cd "$choice"
  else
    exit 1
  fi
} # }}}
duplicate() { # {{{
  case $# in
    0) nohup "$TERMINAL" &>/dev/null ;;
    1) (cd "$1" && nohup "$TERMINAL" &>/dev/null) ;;
    *) exit 1 ;;
  esac & disown
} # }}}

shell::reload() { source "${ZDOTDIR:-$HOME}/.zshrc"; }
xorg::log() { less "$XLOG"; }
xorg::reload-db() { xrdb ~/.config/xorg/xresources; }

# related aliases
alias \
  w='where-to-go' \
  n='nnn-explore' \
  f='find-file' \
  fof='find-file openfork' \
  d='duplicate'
alias rl='shell::reload'
alias xlog='xorg::log'
alias xrl='xorg::reload-db'

# }}}
# Aliases {{{

alias ls='ls --color=auto'
alias la='ls -A'
alias du='du -shc'
alias cpsync='cp -ur'

alias trl='trash-list'
alias trr='trash-restore'

alias p3='python3'
alias jl='julia'
alias g='git-check'
alias e='$EDITOR'

alias sy='dotsync'
alias sx='start-xserver'
alias of='openfork'

exists nvim \
  && alias vi='nvim' vim='nvim' \
  || alias vi='vim'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# }}}
# Settings {{{

HISTFILE=~/.cache/zhistory
HISTSIZE=SAVEHIST=100000
setopt sharehistory
setopt extendedhistory

# }}}
# After {{{

sourceAlt \
  /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh \
  /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# }}}
: # Assert first prompt doesn't show any non-zero return value
