# -*- origami-fold-style: triple-braces -*-
# vim: foldmethod=marker
# Partially stolen from https://github.com/LukeSmithxyz/voidrice and my own bashrc

# Backend functions {{{
## Functions that usually aren't used only on the shell setup.

## Silently source a file, if it exists.
source-maybe() { # {{{
while [ $# != 0 ]; do
    if [ -f "${1}" ]; then
        source "${1}"
        return
    else
        shift
    fi
done
return 1
}
# }}}

## If ${1} is not in ${PATH}, append to it.
## Exit codes:
## 1 => Invalid arguments;
## 2 => ${1} already exists on ${PATH};
path-maybe() { # {{{
[ $# != 1 ] && return 1

if [[ ":${PATH}:" == *"${1}"* ]]; then
    return 2
else
    export PATH="${PATH:+"${PATH}:"}${1}"
fi
}
# }}}

## Check if a tmux session is attached.
tmux-attached() { # {{{
if [ $# = 1 ]; then
    tmux ls | grep "^${1}.*(attached)\$" &>/dev/null
else
    echo -e '\e[1m\e[34mUsage:\e[m ${0} SESSION-NAME'
    return 1
fi
} # }}}

## Start a tmux session or reattach to it.
tmux-session() { # {{{
if [[ -n "$1" ]]; then
    if tmux has -t="$1" &>/dev/null; then
        tmux attach -t "$1"
    else
        tmux new-session -s "$1" \; source-file "${HOME}/.local/lib/tmux-sessions/$1.proj" \; $2
    fi
else
    echo -e '\e[1m\e[34mUsage:\e[m ${0} SESSION-NAME <optional-command>'
fi
} # }}}

## Get the current git branch.
git-branch() { # {{{
local branch="$(git symbolic-ref --short -q HEAD 2>/dev/null)"
if [ -n "${branch}" ]; then
    echo "${branch}"
else
    return 1
fi
} # }}}

## Gets a random alphanumeric string matching [0-9a-z]{$1}.
## $1 => The amount of digits.
random-string() { # {{{
cat /dev/urandom | tr -dc 'a-z0-9' | fold -w ${1:-8} | head -n 1
} # }}}

## Check if shell is interactive
is_interactive() { [[ $- == *i* ]]; }
is_android() { [ "$(uname -o)" = Android ]; }
is_display() { [ -n "${DISPLAY}" ]; }

# }}}
# First Steps {{{

# is this an interactive shell?
if is_interactive; then
    # Set up SSH key server
    if [[ -x /usr/bin/keychain ]]; then
        eval "$(keychain --eval --ignore-missing ~/.ssh/id_rsa 2>/dev/null)"
    fi
fi

if [ -z "${SHELL_FIRST}" ]; then
    SHELL_FIRST="$(date)"

    # Defer to a shell inside tmux, if not attached yet.
    if is_interactive && (is_display || is_android); then
	if [ -z "${TMUX}" ]; then
            exec tmux new -s $(random-string 4)
        fi
    fi
fi


# }}}
# Exports {{{

export KEYTIMEOUT=1
export TERM="xterm-256color"

export PROJECTS="${HOME}/projects"
export DOTFILES="${PROJECTS}/dotfiles"

export EDITOR="nvim"
export TERMINAL="alacritty"
export BROWSER="qutebrowser"
export PAGER="less"
export MANPAGER="/bin/sh -c 'col -b | nvim -c PagerMode -'"

export BAT_THEME="base16"
export GOPATH="${HOME}/.cache/go"
export CARGO_HOME="${HOME}/.cache/cargo"
export RUSTUP_HOME="${HOME}/.cache/rustup"
export ZDOTDIR="${HOME}/.config/zsh"
export TASKRC="${HOME}/.config/taskwarrior/taskrc"

export FZF_DEFAULT_OPTS='
--color=16
--height 60% --layout=reverse --border
'

export XDG_CONFIG_HOME="${HOME}/.config"

# }}}
# Plugins and Extensions {{{

autoload -U colors && colors

# Completion
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # Include hidden files in autocomplete

# Load some extra files
source-maybe "${DOTFILES}/config/zsh/fzf-completion.zsh"
source-maybe "${DOTFILES}/config/zsh/fzf-keybindings.zsh"
bindkey '^R' fzf-history-widget # Not working inside the scripts above. confusing...

# }}}
# Prompt {{{

if [ "$(uname -o)" = "Android" ]; then
    PS1="%B%{$fg[green]%}%{$fg[magenta]%}%~%{$fg[green]%}%{$reset_color%}%b "
else
    PS1="%B%{$fg[green]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[green]%}]%{$reset_color%}%b "
fi
PS2='  '
RPROMPT="%(?..%?)"

# }}}
# Vim bindings and cursor {{{

# Use vim keys in tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes
zle-keymap-select() { # {{{
if [[ ${KEYMAP} == vicmd ]] ||
    [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'

elif [[ ${KEYMAP} == main ]] ||
    [[ ${KEYMAP} == viins ]] ||
    [[ ${KEYMAP} = '' ]] ||
    [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
fi
} # }}}
zle-line-init() { # {{{
zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
echo -ne "\e[5 q"
} # }}}

zle -N zle-keymap-select
zle -N zle-line-init

# Use beam shape cursor on startup.
echo -ne '\e[5 q'
# Use beam shape cursor for each new prompt.
preexec() { echo -ne '\e[5 q' ;}

# }}}
# Bindings {{{

# Use lf to switch directories
lfcd() { # {{{
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
} # }}}

# Use fzf to search history
fh() { # {{{
    print -z $( ([ -n "${ZSH_NAME}" ] && fc -l 1 || history) | fzf --no-sort --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
} # }}}

# Actual binding
bindkey -s '^O' '\e0Di lfcd\n'
bindkey -s '^R' '\e0Di fh\n'
# bindkey -s '\ep' '\e0Di cd ..\n\e pi'

# }}}
# User functions {{{
## Functions that were designed to be used in the shell.

rl() { source "${ZDOTDIR:-"${HOME}"}/.zshrc"; }
sy() { "${DOTFILES}/sync"; }

rd() {
    local CHOICEPATH="${HOME}/persist/articles"
    local CHOICE="$(ls "${CHOICEPATH}" | grep '\.html$' | fzf)"
    open "${CHOICEPATH}/${CHOICE}" &
}

wpp() {
    cd ~/projects &&
        dir="$(find . -maxdepth 1 -type d | sed 's/^.\///g' | grep '[^.]' | fzf)" &&
        br "${dir}"
    }

wpc() {
    br "${DOTFILES}"
}

# }}}
# Sourcing {{{

path-maybe "${HOME}/.local/bin"
path-maybe "${HOME}/.cache/go"
path-maybe "${CARGO_HOME}/bin"
path-maybe "/opt/bin"

# }}}
# Aliases {{{

alias ls='ls --color=auto'
alias la='ls -A'
alias ll='ls -alF'

if ! is_android; then
    alias t='task'
    alias tl='t ls'
    alias tt='t due:today or sched:today or +OVERDUE'
    alias to='t due:tomorrow or sched:tomorrow'
    alias t-s='t pro:school'
    alias tsh='tasksh'

    alias mt='menu-mount' umt='menu-umount'
fi

alias du='du -shc'

alias py3='python3'
alias p3='python3'
alias jl='julia'
alias r='ranger'
alias nm='neomutt'
alias wk='br ~/wiki'

alias vim='nvim' vi='nvim'
alias emacs='emacs-plus emacs'
alias ec='emacs-plus emacsclient'

alias cp-sync='cp -ur'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# }}}
# Settings {{{

# History
HISTFILE=~/.zhistory
HISTSIZE=SAVEHIST=10000
setopt sharehistory
setopt extendedhistory

# less
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
export LESS_TERMCAP_mb=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;35m'     # begin blink
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\e[33m'       # begin reverse video
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\e[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline

# ls; dir
if [ -r "${HOME}/.config/dircolors" ]; then
    eval "$(dircolors -b "${HOME}/.config/dircolors")"
fi

# GCC
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# }}}
# Post Processing {{{

source-maybe "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" \
    "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    source-maybe "${HOME}/.config/broot/launcher/bash/br"

# }}}
: # Assert first prompt doesn't show any non-zero return value
