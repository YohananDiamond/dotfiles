# -*- origami-fold-style: triple-braces -*-
# vim: fdm=marker

# Init {{{

# Load the library file
source ~/.local/lib/ystd.sh &>/dev/null \
  || printf "Couldn't load library file.\n"

# Set the shell title
# setTitle "zsh"

# Load some other libraries
sourceIf "$HOME/.local/share/env.sh"
sourceIf "$STORAGE/share/zshrc.personal"
sourceIf "$HOME/.config/broot/launcher/bash/br"

# Run the setup-tty script if it is a tty
isTTY && setup-tty

# }}}
# Plugins and Extensions {{{

autoload -U colors && colors

# Completion
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # Include hidden files in autocomplete

# }}}
# Prompt {{{

precmd() {
  # Use beam shape cursor for each new prompt.
  printf '\033[5 q'

  # Update title
  local cwd="$(pwd)"
  if grep -q '^'"$HOME" <<<"$cwd"; then
    local cwd="$(sed 's/^'"$(sed 's/\//\\\//g' <<<"$HOME")"'/~/g' <<<"$cwd")"
  fi
  setTitle "$(whoami)@$(hostname):$cwd"
}

[ "$(uname -o)" = "Android" ] && SHORT_PROMPT=1

if [ -n "$SHORT_PROMPT" ]; then
  PS1="%B%{$fg[green]%}[:%{$fg[magenta]%}%~%{$fg[green]%}]%{$reset_color%}%b\$ "
else
  PS1="%B%{$fg[green]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M:%{$fg[magenta]%}%~%{$fg[green]%}]%{$reset_color%}%b\$ "
fi

PS2='  '
RPROMPT="%(?..%?)"

# }}}
# Keybindings Config {{{

# Use vim keys in tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes
function zle-keymap-select { # {{{
  if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]]; then
    printf '\033[1 q'
  elif [[ ${KEYMAP} == main ]] || [[ ${KEYMAP} == viins ]] \
    || [[ ${KEYMAP} = '' ]] || [[ $1 = 'beam' ]]; then
    printf '\033[5 q'
  fi
} # }}}
function zle-line-init { # {{{
  zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
  printf '\e[5 q'
} # }}}

zle -N zle-keymap-select
zle -N zle-line-init

# Use fzf to search history
fh() { # {{{
  print -z $( ([ -n "${ZSH_NAME}" ] && fc -l 1 || history) | fzf --no-sort --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
} # }}}

# Actual binding
bindkey -s '^R' '\e0Di fh\n'

# }}}
# Commands {{{

function inspect-dir { # {{{
  [ $# != 1 ] && [ $# != 2 ] \
    && return 1

  local ch="$2"
  local dir="$(realpath -m $1)"
  if ! [ -r "$dir" ]; then
    printf "Invalid directory: %s\n" "$dir"
    return 1
  fi

  printf '\e[2 q'
  printf '\033[38;5;11m%s\033[m %s\n' "Directory:" "$dir"

  while [ -z "$EXIT" ]; do
    if [ -z "$ch" ]; then
      printf "::::: [c]d, [b]root, [n]nn, [g]it-check, [q]uit\n"
      printf '\e[38;5;11m(dir)\e[m Î»> '
      read -k1 ch
      printf '\n'
    fi

    case "$ch" in
      c) cd "$dir"; local EXIT=1 ;;
      b) br "$dir"; local EXIT=1 ;;
      n) n "$dir"; local EXIT=1 ;;
      g) git-check "$dir" ;;
      "") clear ;;
      ) local EXIT=1 ;;
      q) local EXIT=1 ;;
      "") local EXIT=1 ;;
      $'\n') local EXIT=1 ;;
      *) printf 'Invalid option: "%s"\n' "$ch" ;;
    esac
  done
} # }}}
function select-project { # {{{
  local projects="$(cd ~/projects && fd -d 1 -t d)"
  local choice="$(fzf-tmux <<<"$projects")"
  if [ -n "$choice" ]; then
    printf "%s\n" "${HOME}/projects/$choice"
  fi
} # }}}
function register-dirfunc { # {{{
  [ $# != 2 ] && return 1
  local commandWrapper="$(printf "%s%s() { %s %s; }" "%s" "$1" "%s" "$2")"
  for cmd in br inspect-dir; do
    [ "$cmd" = "inspect-dir" ] \
      && local wordPrefix='W' \
      || local wordPrefix='w'

    local command="$(printf "$commandWrapper" "$wordPrefix" "$cmd")"
    eval "$command"
  done
} # }}}

n() { # {{{
  # Block nesting of nnn in subshells
  if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
    printf "%s\n" "nnn is already running"
    return
  fi

  # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
  # To cd on quit only on ^G, remove the "export" as in:
  #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  # NOTE: NNN_TMPFILE is fixed, should not be modified
  NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

  nnn "$@"

  if [ -f "$NNN_TMPFILE" ]; then
    source "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" > /dev/null
  fi
} # }}}
rl() { source "${ZDOTDIR:-"$HOME"}/.zshrc"; }
gt() { [ $# = 1 ] && (cd "$1" && rg "$(sed 's/1/T/g' <<<'1ODO:')"); }
wp() { local c="$(select-project)"; [ -n "$c" ] && br "$c"; }
Wp() { local c="$(select-project)"; [ -n "$c" ] && inspect-dir "$c" "$1"; }

register-dirfunc d "$DOTFILES"
register-dirfunc k "$F_WIKI"
register-dirfunc docs "$F_PERSIST/docs"

xlog() { less "$XLOG"; }

# }}}
# Aliases {{{

alias ls='ls --color=auto'
alias la='ls -A'
alias du='du -shc'
alias cpsync='cp -ur'

alias p3='python3'
alias jl='julia'
alias G='git-check'
alias e='$EDITOR'
alias sy='dotsync'
alias sx='start-xserver'
alias of='openfork'

exists nvim \
  && alias vi='nvim' vim='nvim' \
  || alias vi='vim'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# }}}
# Settings {{{

HISTFILE=~/.cache/zhistory
HISTSIZE=SAVEHIST=100000
setopt sharehistory
setopt extendedhistory

# }}}
# After {{{

sourceAlt \
  /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh \
  /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# }}}
: # Assert first prompt doesn't show any non-zero return value
