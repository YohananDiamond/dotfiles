#!/usr/bin/env sh

# a script that runs debug actions based on the specified filetype
# intented for editors like vim and emacs

. "$(uselib std)"

if [ $# != 3 ]; then
  printf >&2 "Usage: %s\n" "$(basename $0) <ACTION> <FILETYPE> <FILENAME>"
  printf >&2 "The ACTION and FILETYPE fields are handled based on the code of this script.\n"
  exit 1
fi

tmp=$(mktemp) || {
  printf >&2 "Could not generate temp file.\n"
  exit 1
}

if [ "$file" = "" ]; then
  printf >&2 "Empty filename.\n"
else
  file=$(realpath -m "$3") || exit 1
fi

printf >&2 "NOTE: temp file lies at %s\n" "$tmp"
rm -f "$tmp" # remove temp file for preventing any errors related to "file already exists"

cleanup() {
  [ -f "$tmp" ] && rm -f "$tmp"
  [ -d "$tmp" ] && rm -rf "$tmp"
}

die() {
  printf >&2 "$@"
  cleanup
  exit 1
}

case "$1" in
  run)
    case "$2" in
      @make) fparent-run "Makefile" run-command file-dir make run ;;
      @cargo) fparent-run "Cargo.toml" run-command file-dir cargo run ;;
      @gradlew) fparent-run "gradlew" run-file script-dir run ;;
      rust) rustc "$file" -o "$tmp" && "$tmp" ;;
      haskell)
        nameFull=${file%.*}
        name=$(basename "${file%.*}")
        ghc -o "$tmp" -dynamic "$file" \
          && rm "$nameFull.o" "$nameFull.hi" \
          && "$tmp"
        ;;
      c) gcc "$file" -o "$tmp" && "$tmp" ;;
      cpp) g++ "$file" -o "$tmp" && "$tmp" ;;
      cs) csc "$file" -out:"$tmp" && mono "$tmp" ;;
      clojure) clojure "$file" ;;
      markdown) md-preview "$file" ;;
      sh) if [ -x "$file" ]; then "$file"; else sh "$file"; fi ;;
      zsh) if [ -x "$file" ]; then "$file"; else zsh "$file"; fi ;;
      julia) julia "$file" ;;
      vim) nvim -u "$file" ;;
      scheme) guile "$file" ;;
      tex)
        name=$(basename "${file%.*}")
        mkdir "$tmp"
        cd "$tmp" \
          && pdflatex "$file" \
          && OPEN_GUI=1 open "$name.pdf"
        ;;
      python)
        if exists python3; then
          python3 "$file"
        elif exists python2; then
          printf >&2 "WARNING: using python2 to debug\n"
          python2 "$file"
        elif exists python; then
          printf >&2 "WARNING: using python (unknown version) to debug\n"
          python "$file"
        else
          die "Could not find a suitable python version\n"
        fi ;;
      hy) hy "$file" ;;
      fsharp) fsharpi "$file" ;;
      lua) lua "$file" ;;
      nim) nim compile -r "$file" ;;
      ruby) ruby "$file" ;;
      racket) racket "$file" ;;
      html) openfork "$file" ;;
      moon) moon "$file" ;;
      *) die "(action '%s') unhandled filetype: %s\n" "$1" "$2" ;;
    esac ;;
  build)
    case "$2" in
      @make) fparent-run "Makefile" run-command file-dir make ;;
      @cargo) fparent-run "Cargo.toml" run-command file-dir cargo build ;;
      @gradlew) fparent-run "gradlew" run-file script-dir build ;;
      rust) rustc "$file" -o "$tmp" ;;
      markdown) md-compile "$file" > "$HOME/$(basename "$file").$(date +%Y-%m-%d).html" ;;
      *) die "(action '%s') unhandled filetype: %s\n" "$1" "$2" ;;
    esac ;;
  test)
    case "$2" in
      @make) fparent-run "Makefile" run-command file-dir make test ;;
      @cargo) fparent-run "Cargo.toml" run-command file-dir cargo test ;;
      *) die "(action '%s') unhandled filetype: %s\n" "$1" "$2" ;;
    esac ;;
  check)
    case "$2" in
      @make) make check ;;
      @cargo) cargo check ;;
    esac ;;
  *) die "Invalid action: %s\n" "$1" ;;
esac

cleanup
