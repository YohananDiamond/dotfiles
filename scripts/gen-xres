#!/usr/bin/env lua

-- A small script that outputs xresources based on some configurations. I made
-- this because managing a raw xresources file is very annoying - the C
-- preprocessor is annoying af.

--[[
Base16 Meanings:
- base00 - Default Background
- base01 - Lighter Background (Used for status bars)
- base02 - Selection Background
- base03 - Comments, Invisibles, Line Highlighting
- base04 - Dark Foreground (Used for status bars)
- base05 - Default Foreground, Caret, Delimiters, Operators
- base06 - Light Foreground
- base07 - Light Background
- base08 - Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted
- base09 - Integers, Boolean, Constants, XML Attributes, Markup Link Url
- base0A - Classes, Markup Bold, Search Text Background
- base0B - Strings, Inherited Class, Markup Code, Diff Inserted
- base0C - Support, Regular Expressions, Escape Characters, Markup Quotes
- base0D - Functions, Methods, Attribute IDs, Headings
- base0E - Keywords, Storage, Selector, Markup Italic, Diff Changed
- base0F - Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>
--]]

local function tableSize(t)
  local x = 0
  for _, _ in pairs(t) do
    x = x + 1
  end
  return x
end

local function tablePrintAll(t, fd)
  fd = fd or io.stderr

  for k, v in pairs(t) do
    fd:write(k, " => ", v, "\n")
  end
end

local function fileExists(name)
  local f = io.open(name, "r")
  if f ~= nil then
    f:close()
    return true
  else
    return false
  end
end

local theme = {}
do
  local theme_proc = assert(io.popen("load-base16-theme", "r"))
  for line in theme_proc:lines() do
    if line:match("^%s*$") then
      -- skip
    elseif line:match('^base0[0-9A-F]="#' .. string.rep("[0-9a-fA-F]", 6) .. '"$') then
      local name = line:gsub('^(base0[0-9A-F]).*$', "%1")
      local value = line:gsub(('^base0[0-9A-F]="(#' .. string.rep("[0-9a-fA-F]", 6) .. ')"$'), "%1")
      theme[name] = value
    else
      io.stderr:write("Failed to parse (load-base16-theme) line: ", string.format("%q", line), "\n")
      os.exit(1)
    end
  end
  theme_proc:close()
end

if tableSize(theme) ~= 16 then
  io.stderr:write("Failed to get all 16 colors. Table contents:\n")
  tablePrintAll(theme, io.stderr)
  os.exit(1)
end

local DOTFILES = os.getenv("DOTFILES")
if DOTFILES == nil then
  io.stderr:write("Failed to get DOTFILES env var.\n")
  os.exit(1)
end

local resources_file = DOTFILES .. "/config/dots/resources.lua"
if not fileExists(resources_file) then
  io.stderr:write("File ", string.format("%q", resources_file), " doesn't seem to exist. The configuration should be there.\n")
  os.exit(1)
end

local _meta = {}
_meta.theme = theme
_meta.decl = function(name, value)
  io.stdout:write(name, ": ", value, "\n")
end
_G._meta = _meta

loadfile(resources_file)()
