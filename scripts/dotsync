#!/usr/bin/env bash
# vim: fdm=marker

# Config {{{

DOTFILES_URL_HTTPS="https://github.com/YohananDiamond/dotfiles"
DOTFILES_URL_SSH="git@github.com:yohanandiamond/dotfiles"
DOTFILES="${DOTFILES:-~/projects/dotfiles}"
BACKUP_DIR="$HOME/.cache/dotsync-backup/dotfiles-$(date '+%Y%m%d-%H%M')-$(shuf -i 0-999 -n 1)"

NVIM_PLUGS_FOLDER="${NVIM_PLUGS_FOLDER:-"$HOME/.cache/neovim-plugins"}"

# }}}
# Library {{{

exists() { command -v "$1" >/dev/null 2>/dev/null; }
isAndroid() { [ "$(uname -o)" = "Android" ]; }

installDotfiles() { # {{{
  if [ -e "$DOTFILES" ]; then
    printf >&2 "%s\n" "There is already a file/directory named $DOTFILES. If you want to install, manually remove it."
    exit 1
  else
    printf >&2 "SSH or HTTPS? [S/h] "
    read choice
    if [ "$choice" = S ] || [ "$choice" = s ]; then
      git clone "$DOTFILES_URL_SSH" "$DOTFILES"
    else
      git clone "$DOTFILES_URL_HTTPS" "$DOTFILES"
    fi
  fi
} # }}}
lf() { # {{{
  if [ $# != 2 ]; then
    printf >&2 "%s\n" "lf: not enough arguments."
    return 1
  fi

  local ADDRESS="$1"
  local POINTER="$2"

  mkdir -p "$(dirname "$POINTER")" ||
    return 1

  if [ -e "$POINTER" ] || [ -L "$POINTER" ]; then
    if [ -n "$DOTSYNC_NO_BACKUP" ]; then
      rm -r "$POINTER"
    else
      local BACKUP_FOLDER="$BACKUP_DIR/$(dirname "${POINTER#?}")"
      mkdir -p "$BACKUP_FOLDER"
      if ! mv "$POINTER" -t "$BACKUP_FOLDER"; then
        printf >&2 "%s\n" "Could not make directory: *'$POINTER' -> &'$ADDRESS'"
        return 1
      fi
    fi
  else
    printf >&2 "%s\n" "New symlink: *'$POINTER' -> &'$ADDRESS'"
  fi

  ln -s "$ADDRESS" "$POINTER" \
    || printf >&2 "%s\n" "Error symlinking *'$POINTER' -> &'$ADDRESS'"

  return $? # Indentation fix
} # }}}
lfglob() { # {{{
  if [ $# != 2 ]; then
    printf >&2 "%s\n" "lfglob: not enough arguments"
    return 1
  fi

  local GLOB_FOLDER="$1"
  local TARGET_FOLDER="$2"

  if [ ! -d "$GLOB_FOLDER" ]; then
    printf >&2 '%s: warning: folder "%s" %s exist\n' "$(basename $0)" "$GLOB_FOLDER" "doesn't"
    return 1
  fi

  find "$GLOB_FOLDER" -mindepth 1 -maxdepth 1 |
    while read glob_file; do
      local ADDRESS="$(realpath "$glob_file")"
      local POINTER="$TARGET_FOLDER/$(basename "$glob_file")"

      lf "$ADDRESS" "$POINTER"
    done
} # }}}
lfconf() { # {{{
  if [ $# != 2 ]; then
    printf >&2 "%s\n" "lfconf: not enough arguments"
    return 1
  fi

  local ADDRESS="$DOTFILES/config/$1"
  local POINTER="$2"

  lf "$ADDRESS" "$POINTER"
} # }}}
lflocal() { # {{{
  if [ $# != 2 ]; then
    printf >&2 "%s\n" "link: not enough arguments."
    return 1
  fi

  local ADDRESS="$HOME/persist/local/$1"
  local POINTER="$2"

  lf "$ADDRESS" "$POINTER"
} # }}}
ip() { # {{{
  if [ $# != 2 ]; then
    printf >&2 "%s\n" "ip: not enough arguments"
    return 1
  fi

  local PLNAME="$1"
  local ORIGIN="$2"
  local PLUG_PATH="$NVIM_PLUGS_FOLDER/$PLNAME"

  if ! [ -e "$PLUG_PATH" ] || [ -L "$PLUG_PATH" ]; then
    git clone "$ORIGIN" "$PLUG_PATH"
  fi

  if [ $? = 0 ]; then
    if [ -z "$ARR_NVIM_PLUGS" ]; then
      ARR_NVIM_PLUGS="$PLNAME"
    else
      ARR_NVIM_PLUGS="$ARR_NVIM_PLUGS:$PLNAME"
    fi
  fi
} # }}}

# }}}
# Check if dotfiles are installed {{{

if [ -z "$NO_INSTALL_CHECK" ]; then
  if [ ! -e "$DOTFILES" ]; then
    cat <<EOF
Welcome to YohananDiamond's Dotfiles Setup!
This is a personal script I've made that links some config files I have.
No packages are installed here yet - only dotfiles cloning and config symlinking is done.
Although I've implemented a backup system for preventing problems with losing the files, I can't assure it will actually work properly.
EOF
    printf >&2 "Do you wish to proceed? [y/N] "
    read option
    if [ "$option" = "y" ] || [ "$option" = "Y"]; then
      installDotfiles
    else
      exit 2
    fi
  fi
fi

. "$DOTFILES/config/dots/env.sh"
. "$DOTFILES/config/dots/path.sh"
eval "$(load-base16-theme --export)"

# }}}
# Config Files {{{

if [ -z "$NO_CONFIG_LINK" ]; then
  if isAndroid; then
    lfconf "termux" ~/.termux
  else
    # Startup-related configuration
    lfconf "profile" ~/.profile
    lfconf "profile" ~/.zprofile

    # Window Manager configuration
    lfconf "bspwm" ~/.config/bspwm
    lfconf "polybar" ~/.config/polybar
    lfconf "sxhkd" ~/.config/sxhkd
    lfconf "alacritty" ~/.config/alacritty
    lfconf "picom" ~/.config/picom
    lfconf "xorg" ~/.config/xorg

    lfglob "$DOTFILES/config/qutebrowser" ~/.config/qutebrowser
    lfconf "zathura" ~/.config/zathura
    lfconf "taskwarrior" ~/.config/taskwarrior
    lfconf "sxiv" ~/.config/sxiv

    # lfconf "i3" ~/.config/i3
    # lfconf "rofi" ~/.config/rofi
  fi

  # Shells, interfaces
  lfconf "zsh/zshrc" ~/.config/zsh/.zshrc
  lfconf "zsh/zlogout" ~/.config/zsh/.zlogout
  lfconf "bash/bashrc" ~/.bashrc
  lfconf "tmux.conf" ~/.tmux.conf
  lfconf "inputrc" ~/.config/inputrc
  lfconf "dircolors" ~/.config/dircolors
  lfconf "mimeapps.list" ~/.config/mimeapps.list
  lfconf "dots" ~/.config/dots

  # Programs
  lfconf "broot" ~/.config/broot
  lfconf "git/gitconfig" ~/.gitconfig
  lfconf "git/gitignore" ~/.gitignore
  lfglob "$DOTFILES/config/nvim" ~/.config/nvim

  # Path-related
  lfglob "$DOTFILES/scripts" ~/.local/bin
  lfglob "$DOTFILES/lib" ~/.local/lib
  lfglob "$DOTFILES/share" ~/.local/share
  lfglob "$DOTFILES/desktop" ~/.local/share/applications

  # Gtk Config
  for x in 2 3; do
    lfglob "$DOTFILES/config/gtk-$x.0" ~/.config/"gtk-$x.0"
  done

  # lfconf "vifm" ~/.config/vifm
  lfglob "$DOTFILES/config/emacs" ~/.emacs.d
  # lfglob "$DOTFILES/config/vscode" ~/.config/Code/User
  # lfglob "$HOME/.config/kak" ~/.config/kak

  # Local Symlinking
  lfglob "$STORAGE/scripts" ~/.local/bin
  lfglob "$STORAGE/share" ~/.local/share
fi

# }}}
# NeoVim Plugins {{{

if [ -z "$NO_NEOVIM_PLUGIN" ]; then
  if [ ! -d "$NVIM_PLUGS_FOLDER" ]; then
    printf >&2 "%s\n" "Making neovim plugin directory..."
    mkdir -p "$NVIM_PLUGS_FOLDER"
  fi

  ip "ion-vim@yohanandiamond" "https://gitlab.redox-os.org/YohananDiamond/ion-vim"
  ip "vim-toml" "https://github.com/cespare/vim-toml"
  ip "vim-surround" "https://github.com/tpope/vim-surround"
  ip "vim-repeat" "https://github.com/tpope/vim-repeat"
  ip "vim-commentary" "https://github.com/tpope/vim-commentary"
  ip "jsonc.vim" "https://github.com/neoclide/jsonc.vim"
  ip "lightline.vim" "https://github.com/itchyny/lightline.vim"
  ip "yats.vim" "https://github.com/HerringtonDarkholme/yats.vim"
  ip "emmet-vim" "https://github.com/mattn/emmet-vim"
  ip "julia-vim" "https://github.com/JuliaEditorSupport/julia-vim"
  ip "nvim-nim" "https://github.com/baabelfish/nvim-nim"
  ip "tabular" "https://github.com/godlygeek/tabular"
  ip "vim-markdown" "https://github.com/plasticboy/vim-markdown"
  ip "gruvbox" "https://github.com/morhetz/gruvbox"
  ip "vim-racket" "https://github.com/wlangstroth/vim-racket"
  ip "vim-auto-popmenu" "https://github.com/skywind3000/vim-auto-popmenu"
  ip "scribble.vim" "https://github.com/vim-scripts/scribble.vim"
  ip "vim-python-pep8-indent" "https://github.com/Vimjas/vim-python-pep8-indent"
  ip "pear-tree" "https://github.com/tmsvg/pear-tree"
  ip "vim-buftabline" "https://github.com/ap/vim-buftabline"
  ip "vim-vinegar" "https://github.com/tpope/vim-vinegar"
  ip "haskell-vim" "https://github.com/neovimhaskell/haskell-vim"
  ip "python-syntax" "https://github.com/vim-python/python-syntax"
  ip "vim-rsi" "https://github.com/tpope/vim-rsi"
  ip "dracula" "https://github.com/dracula/vim"
  ip "vim-syntax-extra" "https://github.com/justinmk/vim-syntax-extra"
  ip "base16-vim" "https://github.com/chriskempson/base16-vim"
  # ip "vim-hy" "https://github.com/hylang/vim-hy"
  # ip "vim-fsharp" "https://github.com/fsharp/vim-fsharp"
  # ip "auto-pairs" "https://github.com/jiangmiao/auto-pairs"

  lf "$NVIM_PLUGS_FOLDER" ~/.config/nvim/bundle
fi

# }}}
# Garbage Collection {{{

# For NeoVim plugins
if [ -z "$NO_GC_NVIM_PLUGS" ]; then
  find "$NVIM_PLUGS_FOLDER" -mindepth 1 -maxdepth 1 |
    while read plug_path; do
      plug="$(basename "$plug_path")"
      if ! (grep -q "^$plug:.*\$" <<<"$ARR_NVIM_PLUGS" ||
          grep -q "^.*:$plug:.*\$" <<<"$ARR_NVIM_PLUGS" ||
          grep -q "^.*:$plug\$" <<<"$ARR_NVIM_PLUGS"); then
        if ! file "$plug_path" | grep -q "^$plug_path: symbolic link"; then
          printf >&2 "Removing disabled plugin [$plug]... "
          rm -rf "$plug_path" &&
            printf >&2 "done.\n" ||
            printf >&2 "failed.\n"
        fi
      fi
    done
fi

# Broken Symlinks
for folder in ~/.local/{bin,lib,share}; do
  if [ -d "$folder" ]; then
    fd '.' "$folder" -d1 |
      while read file; do
        if file "$file" | grep -q "^$file: broken symbolic link"; then
          printf >&2 "Removing broken symlink: '$file'... "
          rm -rf "$file" &&
            printf >&2 "done.\n" ||
            printf >&2 "failed.\n"
        fi
      done
    else
      printf >&2 'Target folder "%s" %s exist.\n' "$folder" "doesn't"
  fi
done

# }}}
# Config Gen {{{

mkdir -p "$XDG_CACHE_HOME/gen"
pp "$DOTFILES/config/gen/stalonetrayrc" > "$XDG_CACHE_HOME/gen/stalonetrayrc"
pp "$DOTFILES/config/gen/dunstrc" > "$XDG_CACHE_HOME/gen/dunstrc"

# }}}
