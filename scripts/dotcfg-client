#!/usr/bin/env bash

joinByChar() {
  local IFS="$1"
  shift
  echo "$*"
}

showHelp() {
  printf >&2 "Usage: %s { set [PAIR...] | read-and-set | get [KEY] | clear }\n" "$(basename "$0")"
  exit 1
}

customCurl() {
  local result=$(curl -w $'\n'"%{http_code}" "$@" 2>/dev/null)
  _ccurl_code=$(printf "%s" "$result" | tail -n1)
  _ccurl_output=$(printf "%s" "$result" | head -n1)
}

[ $# = 0 ] && showHelp

content_type="text/plain"
url="${DOTCFG_URL:-localhost}"

if [ -z "$DOTCFG_PORT" ]; then
  printf >&2 "Unknown port - please specify it via the DOTCFG_PORT env var"
fi

case "$1" in
  set)
    [ $# = 1 ] && showHelp
    shift
    customCurl -X"POST" -H"Content-Type: $content_type" --data "$(joinByChar $'\n' "$@")" "$url:$DOTCFG_PORT/set"
    if [ "$_ccurl_code" != 200 ]; then
      printf >&2 "Error (%s): %s\n" "$_ccurl_code" "$_ccurl_output"
    fi
    ;;

  read-and-set)
    [ $# != 1 ] && showHelp
    data=$(cat)
    customCurl -X"POST" -H"Content-Type: $content_type" --data "$data" "$url:$DOTCFG_PORT/set"
    if [ "$_ccurl_code" != 200 ]; then
      printf >&2 "Error (%s): %s\n" "$_ccurl_code" "$_ccurl_output"
    fi
    ;;

  get)
    [ $# != 2 ] && showHelp
    customCurl -X"GET" -H"Content-Type: $content_type" --data "$2" "$url:$DOTCFG_PORT/get"
    if [ "$_ccurl_code" != 200 ]; then
      printf >&2 "Error (%s): %s\n" "$_ccurl_code" "$_ccurl_output"
    else
      printf "%s" "$_ccurl_output"
    fi
    ;;

  clear)
    [ $# != 1 ] && showHelp
    customCurl -X"POST" -H"Content-Type: $content_type" "$url:$DOTCFG_PORT/clear"
    if [ "$_ccurl_code" != 200 ]; then
      printf >&2 "Error (%s): %s\n" "$_ccurl_code" "$_ccurl_output"
    fi
    ;;
esac
