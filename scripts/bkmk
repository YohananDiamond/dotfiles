#!/usr/bin/env ruby

$LOAD_PATH << "#{Dir.home}/.local/lib"
require "ssv-parser"
require "open3"
include SSV

ACTIONS = {
  0 => "openfork",
  1 => "archive",
}

def parse_tokens(line)
  line.length == 0 ? nil : Bookmark.new(line)
end

def dmenu_prompt(prompt, input, height = nil)
  height_args = height == nil ? [] : ["-h", height.to_s]
  Open3::popen2("fzagnostic", *height_args, "-p", prompt) {
    |stdin, stdout, wait_thr|
    stdin.puts(input)
    stdin.close
    [stdout.read, wait_thr.value]
  }
end

class Bookmark
  attr_reader :id, :state, :name, :link, :tags

  def initialize(tokens)
    _id, _state, _name, _link, _tags = tokens

    @id = _id.to_i

    # Parse state
    @state = case _state
             when "t"
               true
             when "f"
               false
             else
               raise "Failed to parse state #{_id}: #{_state.inspect}"
             end

    # Parse name & link
    @name = _name
    @link = _link

    # Parse tags
    @tags = (_tags == nil) ? [] : _tags.split(":")
  end

  def tags_to_s()
    if @tags.length == 0
      ""
    else
      " [#{@tags.join(":")}]"
    end
  end
end

if __FILE__ == $0
  # Get options
  bookmark_path = ENV["BKMK_FILE"] || "#{Dir.home}/.cache/bkmk"
  opener = ENV["BKMK_OPENER"] || ENV["OPENER"] || "xdg-open"

  # Check if the bookmark file exists
  if not File::file?(bookmark_path)
    raise "File #{bookmark_path.inspect} does not exist."
  end

  # Read and parse the file
  file_contents = File::read(bookmark_path)
  bookmarks_map = Hash.new
  token_lines = SSV::tokenize_lines(file_contents, allow_raise: true)
  token_lines.each { |tokens|
    parsed = parse_tokens(tokens)
    if parsed != nil
      bookmark = Bookmark.new(tokens)
      bookmarks_map[bookmark.id] = bookmark
    end
  }

  # select bookmark
  maxlen = bookmarks_map.length.to_s.length
  _input = bookmarks_map.select { |k, v| !v.state }
  input = _input
    .map { |k, v| "%0#{maxlen}d #{v.name}#{v.tags_to_s}" % "#{k}" }
    .join("\n")
  pre_choice, code = dmenu_prompt("#{_input.length} bkmk. available:", input, 30)
  exit 1 if code != 0
  chosen = bookmarks_map[pre_choice.split(" ")[0].to_i]

  # select action
  maxlen = ACTIONS.length.to_s.length
  input = ACTIONS
    .map { |k, v| "%0#{maxlen}d #{v}" % "#{k}" }
    .join("\n")
  pre_choice, code = dmenu_prompt("Action:", input, 30)
  exit 1 if code != 0
  action_id = pre_choice.split(" ")[0].to_i

  # process action
  case action_id
  when 0
    IO.popen([opener, chosen.link]) {|f| puts f.gets }
  else
    raise "Unknown action: #{action_id.inspect}"
  end
end
