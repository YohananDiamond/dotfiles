#!/usr/bin/env ruby

require 'open3'
require 'json'
require 'net/http'
require 'cgi'

ACTIONS_MAP = {
  0 => "open (via $OPENER)",
  1 => "archive",
}

$changed = false

def usage()
  puts "Usage: bkmk { --help | -a <url> | -m }"
  puts "  -a: add the bookmark <url>"
  puts "  -m: open an interactive bookmark menu with fzagnostic"
  exit 1
end

def main()
  # find environment variables
  bkpath = ENV["BKMK_FILE"] || "#{Dir.home}/.cache/bkmk"
  opener = ENV["BKMK_OPENER"] || ENV["OPENER"] || "xdg-open"

  # read and parse the file
  id_arr = []
  if not File::file?(bkpath)
    die "#{bkpath.inspect}: no such file or directory"
  end
  original = File::read(bkpath)
  if original.length == 0
    $changed = true
    original = "[]"
  end
  bookmarks = JSON::parse(original).map { |x| Bookmark::new(x, id_arr) }
  non_archived = bookmarks.select { |x| !x.archived }

  case ARGV.length
  when 1
    case ARGV[0]
    when "--help"
      usage
    when "-m"
      app_menu(bookmarks, non_archived)
    else
      usage
    end
  when 2
    case ARGV[0]
    when "-a"
      app_addbk(bookmarks, non_archived, id_arr, ARGV[1])
    else
      usage
    end
  else
    usage
  end

  if $changed
    gen = JSON::pretty_generate(bookmarks.map { |x| x.to_list })
    File::write(bkpath, gen)
  end
end

def app_addbk(bookmarks, non_archived, id_arr, url)
  title = begin
            source = Net::HTTP::get(URI(url))
            title_tag = "<title>"
            min = source.index(title_tag) + title_tag.length
            max = source.index("</title>") - 1
            CGI::unescapeHTML(source[min..max])
              .gsub(/\n/, "")
              .gsub(/ {2,}/, " ")
              .gsub(/^ /, "")
              .gsub(/ $/, "")
          rescue
            nil
          end

  title = if title == nil || /^\d{3} Found$/ =~ title
            puts "Could not get title (#{url})."
            print "manual title> "
            input = STDIN.gets.chomp
            if input.length == 0
              die "operation cancelled"
            else
              input
            end
          else
            title
          end

  p title

  new_bookmark = Bookmark::new([(bookmarks.map{ |x| x.raw_id }.max || -1) + 1,
                                false,
                                title.chomp,
                                url,
                                nil], id_arr)

  bookmarks.push(new_bookmark)
  $changed = true
end

def app_menu(bookmarks, non_archived)
  if non_archived.length == 0
    die("there are no unarchived bookmarks to select")
  end

  # select a bookmark
  format_len = [bookmarks.length - 1, 0].max.to_s.length
  input = non_archived
    .each_with_index.map { |e, i| "%0#{format_len}d #{e.name}#{e.tags_to_s}" % i }
    .join("\n")
  out, code = fzagnostic("#{non_archived.length} bkmk:", input, 30)
  exit 1 if code != 0
  choice = non_archived[out.split(" ")[0].to_i]

  # select an action
  format_len = [ACTIONS_MAP.length - 1, 0].max.to_s.length
  input = ACTIONS_MAP
    .map { |k, v| "%0#{format_len}d #{v}" % k }
    .join("\n")
  out, code = fzagnostic("Action:", input, 30)
  exit 1 if code != 0
  choice_a = out.split(" ")[0].to_i

  case choice_a
  when 0
    IO::popen([opener, choice.url]) { |f| puts f.gets }
  when 1
    $changed = true
    choice.archive!
  else
    die("unknown action: #{choice_a.inspect}")
  end
end

class Bookmark
  attr_reader :raw_id, :archived, :name, :url, :tags

  def initialize(json, id_arr)
    @raw_id = if json[0].is_a?(Integer)
                id = json[0]
                if id_arr.include?(id)
                  die("duplicated ID: #{json[0]}")
                else
                  id_arr.push(id)
                  id
                end
              else
                die("invalid ID: #{json[0].inspect}")
              end
    @archived = (json[1].is_a?(FalseClass) || json[1].is_a?(TrueClass)) ? json[1] : die("invalid archived: #{json[1].inspect}")
    @name = json[2].is_a?(String) ? json[2] : die("invalid name: #{json[2].inspect}")
    @url = json[3].is_a?(String) ? json[3] : die("invalid url: #{json[3].inspect}")
    @tags = json[4]
  end

  def archive!()
    @archived = true
  end

  def tags_to_s()
    if @tags.is_a?(Array)
      " [#{@tags.join(":")}]"
    else
      ""
    end
  end

  def to_list()
    [@raw_id, @archived, @name, @url] + (@tags == nil ? [] : [@tags])
  end
end

def die(str)
  puts "bkmk: " + str
  exit 1
end

def fzagnostic(prompt, input, height = nil)
  height_args = (height == nil) ? [] : ["-h", height.to_s]
  Open3::popen2("fzagnostic", *height_args, "-p", prompt) { |stdin, stdout, thread|
    stdin.puts(input)
    stdin.close()
    [stdout.read, thread.value]
  }
end

main if __FILE__ == $0
