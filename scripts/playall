#!/usr/bin/env python3

import random
import os, sys
import subprocess as sp
import argparse as ap
from pathlib import Path

IGNORE_EXTENSIONS = {"png", "jpg", "jpeg", "txt", "gif", "zip", "tar"}
VALID_EXTENSIONS = {"mp3", "wav", "ogg", "flac", "opus", "m4a", "mp", "mp4", "mid", "midi"}


def main():
    parser = ap.ArgumentParser(
        prog=Path(sys.argv[0]).name,
        description="play a folder of songs",
    )

    parser.add_argument(
        "folder",
        help="the folder where the list of files should be obtained from - defaults to current directory",
        action="store",
        nargs='?',
        type=str,
    )

    parser.add_argument(
        "-s", "--shuffle",
        help="if the files list should be shuffled or not",
        action="store_true",
    )

    gp = parser.add_mutually_exclusive_group(required=False)

    gp.add_argument(
        "-r", "--recursive",
        help="make the listing recursive",
        action="store_true",
    )

    gp.add_argument(
        "-o", "--starting-offset",
        help="the starting offset of the list (essentially useless if --shuffle is enabled)",
        nargs=1,
        type=int,
        action="store",
    )

    gp.add_argument(
        "-l", "--limit",
        help="the maximum amount of songs to play",
        nargs=1,
        type=int,
        action="store",
    )

    gp.add_argument(
        "-R", "--not-recursive",
        help="make the listing non-recursive",
        action="store_true",
    )

    parser.add_argument(
        "-v", "--version",
        action="version",
        version=f"{parser.prog} v. VOID",
    )

    opts = parser.parse_args(sys.argv[1:])
    folder = Path(opts.folder) if opts.folder else Path.cwd()

    if opts.recursive:
        recursive = True
    elif opts.not_recursive:
        recursive = False
    else:
        recursive = True

    def has_ignorable_extension(file):
        for extension in IGNORE_EXTENSIONS:
            if file.name.endswith(extension):
                return True
        return False

    print("Getting file list...", file=sys.stderr)
    files = [file for file in
             get_files(folder, recursive=recursive)
             if not has_ignorable_extension(file)]

    if opts.shuffle:
        print("Shuffling songs list...", file=sys.stderr)
        random.shuffle(files)
    else:
        print("Sorting songs list...", file=sys.stderr)
        files.sort()

    print("Ready to play!", file=sys.stderr)

    starting_offset = opts.starting_offset[0] if opts.starting_offset else 0
    limit = opts.limit[0] if opts.limit else None

    limit_count = 0
    slice = files[starting_offset:]
    for i, file in enumerate(slice):
        name = file.name

        for extension in VALID_EXTENSIONS:
            if name.endswith(extension):
                break
        else:
            print(f"File {file} has unknown extension", file=sys.stderr)
            continue

        os.system("tput reset")

        print(f"Playing file {i + 1} of {len(slice)}: {file}", file=sys.stderr)

        if name.endswith("mid") or name.endswith("midi"):
            proc_call = ["play-midi", str(file)]
        else:
            proc_call = ["mpv", "--no-video", str(file)]

        inc_limitc = True
        with sp.Popen(proc_call, encoding="UTF-8") as proc:
            try:
                errored = proc.wait() != 0
            except KeyboardInterrupt:
                errored = True

            if errored:
                try:
                    inc_limitc = False # so the count doesn't go up, necessarily.
                    print(
                        f"mpv seems to have errored. Do you want to continue playing?",
                        file=sys.stderr,
                    )

                    print(
                        f"[Y/n] ",
                        end="",
                        file=sys.stderr,
                    )

                    i = input()

                    if i.lower() != "y" and len(i) > 0:
                        break
                except KeyboardInterrupt:
                    print("\n^C received. Aborting...")
                    break
                except EOFError:
                    print("\nEOF error received. Aborting...")
                    break


        limit_count += 1
        if limit:
            if limit_count >= limit:
                print("limit exceeded; finishing...", file=sys.stderr)
                break
            else:
                print(f"{limit - limit_count} songs left...", file=sys.stderr)


def get_files(folder: Path, recursive=True):
    listing = []

    for f in folder.iterdir():
        if f.is_file():
            listing.append(f)
        elif f.is_dir():
            if recursive:
                listing.extend(get_files(f, recursive=True))

    return listing


if __name__ == "__main__":
    main()
