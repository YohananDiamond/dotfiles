#!/usr/bin/env bash

# An opener script based off nuke.
# https://github.com/jarun/nnn/blob/master/plugins/nuke

. ~/.local/lib/ystd.sh
depCheck termup runpage

# Environment Variables
# OPEN_GUI: whether the file should be always opened on a GUI
# application.

# Options
set -f -o noclobber -o noglob

# Assist Functions
#   exists: if a command exists
#   tryRun: checks if a command exists. If it exists, run it and exit the
# script.
#   tryRunTerm: only runs if OPEN_GUI is unset
#   tryRunGraph: only runs if OPEN_GUI is set
#   tryRunTermGraph: runs if OPEN_GUI is unset, but also runs if OPEN_GUI is
# set, but through the "termup" script.
tryRun() {
  if exists "$1"; then
    if [ "$1" = "runpage" ]; then
      exists "$2" || return
    fi

    if [ -n "$OPEN_GUI" ]; then
      "$@" >/dev/null 2>&1
    else
      "$@"
    fi
    exit
  fi
}
tryRunTerm() { [ -z "$OPEN_GUI" ] && tryRun "$@"; }
tryRunGraph() { [ -n "$OPEN_GUI" ] && tryRun "$@"; }
tryRunTermGraph() { tryRunTerm "$@"; tryRunGraph termup "$@"; }
tryXdgOpen() { VIA_OPEN=1 tryRunGraph xdg-open "$@"; }

IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}" # protect trailing \n
PATH=$PATH:"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins"

if [ $# != 1 ]; then
  printf >&2 "Usage: %s %s\n" "$(basename $0)" "<file>"
  exit 1
fi

FILE="$1"

FILENAME=$(basename "$1")
EXT="${FILENAME##*.}"
if ! [ -z "$EXT" ]; then
  EXT="$(printf "%s" "$EXT" | tr '[:upper:]' '[:lower:]')"
fi

handleUrl() {
  if grep -q '^http\(s\)\?://' <<<"$FILE" \
    || grep -q '^ftp://' <<<"$FILE"; then
      tryRunGraph $BROWSER "$FILE"
      tryRunTerm w3m "$FILE" # Temporary measure. Might set an env var for CLI browsers later.
  fi
}

handlePdf() {
  tryRunGraph zathura "$FILE"
  tryRunTerm runpage pdftotext -l 10 -nopgbrk -q -- "$FILE" -
  tryRunTerm mutool draw -F txt -i -- "$FILE" 1-10
  tryRunTerm exiftool "$FILE"
}

handleAudio() {
  exists mocp && tryRunTerm mocplay "$FILE" "opener"
  tryRunTermGraph mpv --no-video "$FILE"
  tryRunTerm mediainfo "$FILE"
  tryRunTerm exiftool "$FILE"
}

handleVideo() {
  tryRunGraph smplayer "$FILE"
  tryRunGraph mpv "$FILE"
  tryRunTerm mpv --no-video "$FILE"
  tryRunTerm runpage mediainfo "$FILE"
  tryRunTerm runpage mediainfo "$FILE"
}

handleExt() {
  case "$EXT" in
    a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
      tryRunTerm runpage atool --list -- "$FILE"
      tryRunTerm runpage bsdtar --list --file "$FILE"
      ;;
    rar) tryRunTermGraph runpage unrar l -p- -- "$FILE" ;;
    7z) tryRunTerm runpage 7z l -p -- "$FILE" ;;
    pdf) handlePdf ;;

    aac|flac|m4a|mid|midi|mpa|mp2|mp3|ogg|wav|wma)
      handleAudio ;;

    avi|mkv|mp4)
      handleVideo ;;

    torrent)
      tryRunTerm rtorrent "$FILE"
      tryRunTerm transmission-show -- "$FILE"
      ;;

    odt|ods|odp|sxw)
      tryRunTerm runpage odt2txt "$FILE" ;;

    txt|log)
      tryRunTermGraph runpage cat "$FILE" ;;

    kra) tryRunGraph krita "$FILE" ;;

    md)
      tryRunTerm runpage glowrapper "$FILE" 
      tryRunGraph md-preview "$FILE"
      ;;

    htm|html|xhtml)
      tryRunTerm runpage w3m -dump "$FILE"
      tryRunTerm runpage lynx -dump -- "$FILE"
      tryRunTerm runpage elinks -dump "$FILE"
      tryRunGraph $BROWSER "$FILE"
      tryXdgOpen "$FILE"
      ;;

    json)
      tryRunTerm runpage jq --color-output . "$FILE"
      tryRunTerm runpage python -m json.tool -- "$FILE"
      ;;
  esac
}

handleMultimedia() {
  case "$1" in
    image/*)
      tryRunGraph sxiv "$FILE"
      tryRunTerm runpage viu -n "$FILE"
      tryRunTerm runpage img2txt --gamma=0.6 -- "$FILE"
      tryRunTerm runpage exiftool "$FILE"
      ;;

    application/pdf) handlePdf ;;
    audio/*) handleAudio ;;
    video/*) handleVideo ;;
  esac
}

handleMIME() {
  case "$1" in
    inode/directory) tryRunTermGraph nnn "$FILE" ;;
    text/troff) tryRunTerm runpage man -l "$FILE" ;;
    text/*) tryRunTermGraph $PAGER "$FILE" ;;
    */xml) tryRunTerm runpage cat "$FILE" ;;
    image/vnd.djvu)
      tryRunTerm runpage djvutxt "$FILE"
      tryRunTerm runpage exiftool "$FILE"
      ;;
  esac
}

handleFallback() {
  tryXdgOpen "$FILE"
  tryRunTerm runpage printf "*** File Details ***\n%s" "$(file --dereference --brief $FILE)"
}

handleBlocked() {
  case "$1" in
    application/x-sharedlib) exit 1 ;;
    application/x-shared-library-la) exit 1 ;;
    application/x-executable) exit 1 ;;
    application/x-shellscript) exit 1 ;;
  esac
}

MIMETYPE="$(file --dereference --brief --mime-type -- $FILE)"
handleBlocked "$MIMETYPE"
handleUrl
handleExt
handleMultimedia "$MIMETYPE"
handleMIME "$MIMETYPE"
handleFallback
exit 1
