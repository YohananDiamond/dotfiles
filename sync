#!/usr/bin/env bash
# vim: foldmethod=marker
# -*- origami-fold-style: triple-braces -*-

# Library {{{

exists() { command -v "$1" >/dev/null 2>/dev/null; }
is_android() { [ "$(uname -o)" = "Android" ]; }

# Installing Dotfiles
install_dotfiles() { # {{{
  if [ -r "$DOTFILES" ]; then
    echo "There is already a folder in $DOTFILES. If you want to install, manually remove said folder."
  else
    printf "SSH or HTTPS? [S/h] "
    read choice
    if [ "$choice" = S ] || [ "$choice" = s ]; then
      git clone "$DOTFILES_URL_SSH" "$DOTFILES"
    else
      git clone "$DOTFILES_URL_HTTPS" "$DOTFILES"
    fi
  fi
} # }}}

# Symlinking Utilities
lf() { # {{{
  if [ $# != 2 ]; then
    echo "lf: not enough arguments."
    return 1
  fi

  # Create a file $POINTER, that points to $ADDRESS
  # Yes, I'm using C (ish) terminology.
  local ADDRESS="$1"
  local POINTER="$2"

  mkdir -p "$(dirname "$POINTER")" ||
    return 1

  if [ -e "$POINTER" ] || [ -L "$POINTER" ]; then
    if [ -z "$NO_BACKUP" ]; then
      local BACKUP_FOLDER="$BACKUP_DIR/$(dirname "${POINTER#?}")"
      mkdir -p "$BACKUP_FOLDER"
      if ! mv "$POINTER" -t "$BACKUP_FOLDER"; then
        echo "  Error symlinking *'$POINTER' -> &'$ADDRESS'"
        return 1
      fi
    fi
  else
    echo "  New file: *'$POINTER' -> &'$ADDRESS'"
  fi

  ln -s "$ADDRESS" "$POINTER" ||
    echo "  Error symlinking *'$POINTER' -> &'$ADDRESS'"
} # }}}
lfglob() { # {{{
  if [ $# != 2 ]; then
    echo "lfglob: not enough arguments"
    return 1
  fi

  local GLOB_FOLDER="$1"
  local TARGET_FOLDER="$2"

  find "$GLOB_FOLDER" -mindepth 1 -maxdepth 1 |
    while read glob_file; do
      local ADDRESS="$(realpath "$glob_file")"
      local POINTER="$TARGET_FOLDER/$(basename "$glob_file")"

      lf "$ADDRESS" "$POINTER"
    done 
} # }}}
lfconf() { # {{{
  if [ $# != 2 ]; then
    echo "lfconf: not enough arguments"
    return 1
  fi

  local ADDRESS="$DOTFILES/config/$1"
  local POINTER="$2"

  lf "$ADDRESS" "$POINTER"
} # }}}
lflocal() { # {{{
  if [ $# != 2 ]; then
    echo "link: not enough arguments."
    return 1
  fi

  local ADDRESS="$HOME/persist/local/$1"
  local POINTER="$2"

  lf "$ADDRESS" "$POINTER"
} # }}}

# NeoVim Plugin Management
ip() { # {{{
  if [ $# != 2 ]; then
    echo "ip: not enough arguments"
    return 1
  fi

  local PLNAME="$1"
  local ORIGIN="$2"
  local PLUG_PATH="$NVIM_PLUGS_FOLDER/$PLNAME"

  if ! [ -e "$PLUG_PATH" ] || [ -L "$PLUG_PATH" ]; then
    git clone "$ORIGIN" "$PLUG_PATH"
  fi

  if [ $? = 0 ]; then
    if [ -z "$ARR_NVIM_PLUGS" ]; then
      ARR_NVIM_PLUGS="$PLNAME"
    else
      ARR_NVIM_PLUGS="$ARR_NVIM_PLUGS:$PLNAME"
    fi
  fi
} # }}}

# }}}
# Config {{{

DOTFILES_URL_HTTPS="https://github.com/YohananDiamond/dotfiles"
DOTFILES_URL_SSH="git@github.com:yohanandiamond/dotfiles"
DOTFILES="${HOME}/projects/dotfiles"
BACKUP_DIR="${HOME}/.cache/symlink-backup/dotfiles.$(date '+%Y-%m-%d.%H.%M').$(shuf -i 0-99 -n 1)"

PROGRAM_NAME="$(basename "$0")"
NVIM_PLUGS_FOLDER="${NVIM_PLUGS_FOLDER:-"$HOME/.cache/nvim-plugs"}"

# }}}

# Check if dotfiles are installed {{{

if [ -z "$NO_INSTALL_CHECK" ]; then
  if ! [ -r "$DOTFILES" ]; then
    cat <<EOF
Welcome to YohananDiamond's Dotfiles Setup!
This is a personal script I've made that links some config files I have.
No packages are installed here yet - only dotfiles cloning and config symlinking is done.
Although I've implemented a backup system for preventing problems with losing the files, I can't assure it will actually work properly.
EOF
    printf "Do you wish to proceed? [y/N] "
    read option
    if [ "$option" = "y" ] || [ "$option" = "Y"]; then
      install_dotfiles
    else
      exit 2
    fi
  fi
fi

# }}}
# Config Files {{{

if [ -z "$NO_CONFIG_LINK" ]; then
  echo "+ Symlinking files..."

  if is_android; then
    lfconf "termux" ~/.termux
  else
    # Startup-related configuration
    lfconf "xorg/xresources" ~/.Xresources
    lfconf "xorg/xinitrc" ~/.xinitrc
    lfconf "xorg/xprofile" ~/.xprofile
    lfconf "profile" ~/.profile
    lfconf "profile" ~/.zprofile

    # Window Manager configuration
    lfconf "bspwm" ~/.config/bspwm
    lfconf "polybar" ~/.config/polybar
    lfconf "sxhkd" ~/.config/sxhkd
    lfconf "alacritty" ~/.config/alacritty
    lfconf "dunst" ~/.config/dunst
    lfconf "picom" ~/.config/picom

    lfconf "qutebrowser/config.py" ~/.config/qutebrowser/config.py
    lfconf "zathura" ~/.config/zathura
    lfconf "taskwarrior" ~/.config/taskwarrior

    # lfconf "i3" ~/.config/i3
    # lfconf "rofi" ~/.config/rofi
  fi

  # Shells, interfaces
  lfconf "zsh/zshrc" ~/.config/zsh/.zshrc
  lfconf "bash/bashrc" ~/.bashrc
  lfconf "tmux.conf" ~/.tmux.conf
  lfconf "inputrc" ~/.inputrc

  # Programs
  lfconf "broot" ~/.config/broot
  lfconf "git/gitconfig" ~/.gitconfig
  lfconf "git/gitignore" ~/.gitignore
  lfglob "$DOTFILES/config/nvim" ~/.config/nvim

  # Path-related
  lfglob "$DOTFILES/local/bin" ~/.local/bin
  lfglob "$DOTFILES/local/lib" ~/.local/lib
  lfglob "$DOTFILES/local/share" ~/.local/share

  # Gtk Config
  for x in 2 3; do
    lfglob "$DOTFILES/config/gtk-$x.0" ~/.config/"gtk-$x.0"
  done

  # lfconf "vifm" ~/.config/vifm
  # lfconf "kak" ~/.config/kak
  # lfglob "$DOTFILES/config/emacs" ~/.emacs.d
  # lfglob "$DOTFILES/config/vscode" ~/.config/Code/User

  # Local Symlinking
  lfglob "$HOME/persist/local/bin" ~/.local/bin
  lfglob "$HOME/persist/local/share" ~/.local/share
fi

# }}}
# NeoVim Plugins {{{

if [ -z "$NO_NEOVIM_PLUGIN" ]; then
  echo "+ Check-up: neovim plugins"

  if ! [ -r "$NVIM_PLUGS_FOLDER" ]; then
    echo "  Making plugin directory..."
    mkdir -p "$NVIM_PLUGS_FOLDER"
  fi

  ip "ion-vim@yohanandiamond" "https://gitlab.redox-os.org/YohananDiamond/ion-vim"
  ip "deoplete.nvim" "https://github.com/Shougo/deoplete.nvim"
  ip "vim-toml" "https://github.com/cespare/vim-toml"
  ip "vim-surround" "https://github.com/tpope/vim-surround"
  ip "vim-repeat" "https://github.com/tpope/vim-repeat"
  ip "vim-commentary" "https://github.com/tpope/vim-commentary"
  ip "jsonc.vim" "https://github.com/neoclide/jsonc.vim"
  ip "lightline.vim" "https://github.com/itchyny/lightline.vim"
  ip "yats.vim" "https://github.com/HerringtonDarkholme/yats.vim"
  ip "ctrlp.vim" "https://github.com/ctrlpvim/ctrlp.vim"
  ip "emmet-vim" "https://github.com/mattn/emmet-vim"
  ip "vim-hy" "https://github.com/hylang/vim-hy"
  ip "vim-fsharp" "https://github.com/fsharp/vim-fsharp"
  ip "goyo.vim" "https://github.com/junegunn/goyo.vim"
  ip "julia-vim" "https://github.com/JuliaEditorSupport/julia-vim"
  ip "nord-vim" "https://github.com/arcticicestudio/nord-vim"
  ip "nvim-nim" "https://github.com/baabelfish/nvim-nim"
  ip "tabular" "https://github.com/godlygeek/tabular"
  ip "vim-markdown" "https://github.com/plasticboy/vim-markdown"
  ip "lexima.vim" "https://github.com/cohama/lexima.vim"
  ip "emmet-vim" "https://github.com/mattn/emmet-vim"
  ip "gruvbox" "https://github.com/morhetz/gruvbox"
  ip "vim-racket" "https://github.com/wlangstroth/vim-racket"
  ip "vim-auto-popmenu" "https://github.com/skywind3000/vim-auto-popmenu"
  ip "scribble.vim" "https://github.com/vim-scripts/scribble.vim"
  ip "vim-python-pep8-indent" "https://github.com/Vimjas/vim-python-pep8-indent"

  lf "$NVIM_PLUGS_FOLDER" ~/.config/nvim/bundle
fi

# }}}
# "Garbage Collection" {{{

# For NeoVim plugins
if [ -z "$NO_GC_NVIM_PLUGS" ]; then
  echo "+ Garbage Collection: neovim plugins"
  find "$NVIM_PLUGS_FOLDER" -mindepth 1 -maxdepth 1 |
    while read plug_path; do
      plug="$(basename "$plug_path")"
      if ! (grep -q "^$plug:.*\$" <<<"$ARR_NVIM_PLUGS" ||
          grep -q "^.*:$plug:.*\$" <<<"$ARR_NVIM_PLUGS" ||
          grep -q "^.*:$plug\$" <<<"$ARR_NVIM_PLUGS"); then
        if ! file "$plug_path" | grep -q "^$plug_path: symbolic link"; then
          printf "  Removing disabled plugin [$plug]... "
          rm -rf "$plug_path" &&
            echo "done." ||
            echo "failed."
        fi
      fi
    done
fi

# For Symlinks
for folder in ~/.local/{bin,lib,share}; do
  if [ -r "$folder" ]; then
    find "$folder" -mindepth 1 -maxdepth 1 |
      while read file; do
        if file "$file" | grep -q "^$file: broken symbolic link"; then
          printf "  Removing broken symlink: '$file'... "
          rm -rf "$file" &&
            echo "done." ||
            echo "failed."
        fi
      done
    else
      echo "  Target folder \"$folder\" doesn't exist."
  fi
done

# }}}
